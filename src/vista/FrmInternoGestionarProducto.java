package vista;

import conexion.conexion;
import controlador.Producto_Controller;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import modelo.Producto;

public class FrmInternoGestionarProducto extends javax.swing.JInternalFrame {

    private int idProducto;
    private int idCategoria = 0;
    int obtenerIdCategoriaCombo = 0;
    private String imagePath;
    private int filaSeleccionada = -1;

    public FrmInternoGestionarProducto() {
        initComponents();
        this.setSize(1160, 490);
        this.setTitle("Gestionar Producto");
        btnSeleccionarImagen.setEnabled(false);
        this.cargarTablaProductos();
        this.CargarComboCategoria();

        //INSERTAR IMAGEN CON CODIGO
        ImageIcon wallpaper = new ImageIcon("src/imagenes/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(1160, 490, WIDTH));
        jlabel_wallpaper.setIcon(icono);
        this.repaint();

        tablaGestionProductos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = tablaGestionProductos.getSelectedRow();
                    if (selectedRow != -1) {
                        mostrarImagenProductoSeleccionado(selectedRow);
                    }
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnStock = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboIva = new javax.swing.JComboBox<>();
        comboCategoria = new javax.swing.JComboBox<>();
        lblFoto = new javax.swing.JLabel();
        btnSeleccionarImagen = new javax.swing.JButton();
        panelTabla = new javax.swing.JPanel();
        ScrollCategorias = new javax.swing.JScrollPane();
        tablaGestionProductos = new javax.swing.JTable();
        jlabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gestión de Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 0, -1, -1));

        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/borrar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 170, 140, 30));

        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/editar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 170, 140, 30));

        btnStock.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnStock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/deposito.png"))); // NOI18N
        btnStock.setText("Stock");
        btnStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStockActionPerformed(evt);
            }
        });
        getContentPane().add(btnStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 170, 130, 30));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Precio:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 100, 20));

        txtPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioActionPerformed(evt);
            }
        });
        jPanel1.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 190, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Nombre:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 100, 20));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Stock:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 100, 20));

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 190, 30));

        txtStock.setEnabled(false);
        txtStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStockActionPerformed(evt);
            }
        });
        jPanel1.add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 190, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Descripción:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, 100, 20));

        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });
        jPanel1.add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 50, 190, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Iva:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 50, 20));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Categoría:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 50, 100, 20));

        comboIva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Iva:", "No grava Iva", "12%", "14%" }));
        comboIva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboIvaActionPerformed(evt);
            }
        });
        jPanel1.add(comboIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, 160, -1));

        comboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Categoria:", "Item 2", "Item 3", "Item 4" }));
        comboCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCategoriaActionPerformed(evt);
            }
        });
        jPanel1.add(comboCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 50, 160, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 930, 120));

        lblFoto.setBackground(new java.awt.Color(153, 51, 255));
        lblFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/agregarImagenProducto.png"))); // NOI18N
        getContentPane().add(lblFoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 30, 130, 140));

        btnSeleccionarImagen.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnSeleccionarImagen.setForeground(new java.awt.Color(0, 0, 0));
        btnSeleccionarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/subir.png"))); // NOI18N
        btnSeleccionarImagen.setText("Cargar imagen");
        btnSeleccionarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarImagenActionPerformed(evt);
            }
        });
        getContentPane().add(btnSeleccionarImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 180, -1, 40));

        panelTabla.setBackground(new java.awt.Color(255, 255, 255));
        panelTabla.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelTabla.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaGestionProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ScrollCategorias.setViewportView(tablaGestionProductos);

        panelTabla.add(ScrollCategorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 910, 220));

        getContentPane().add(panelTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 930, 240));
        getContentPane().add(jlabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1160, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        /*Producto producto = new Producto();
        Producto_Controller controlProducto = new Producto_Controller();
        String iva = comboIva.getSelectedItem().toString().trim();
        String categoria = comboCategoria.getSelectedItem().toString().trim();

        // Validar campos
        if (txtNombre.getText().isEmpty() || txtStock.getText().isEmpty() || txtPrecio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe completar todos los campos");
        } else if (iva.equalsIgnoreCase("Seleccione Iva:")) {
            JOptionPane.showMessageDialog(null, "Seleccione Iva");
        } else if (categoria.equalsIgnoreCase("Seleccione categoria:")) {
            JOptionPane.showMessageDialog(null, "Seleccione categoria");
        } else {
            try {
                producto.setNombre(txtNombre.getText().trim());
                producto.setStock(Integer.parseInt(txtStock.getText().trim()));

                String precioTXT = txtPrecio.getText().trim();
                double precio = 0.0;

                // Se transforma la coma(,) a punto(.)
                precio = Double.parseDouble(precioTXT.replace(",", "."));
                producto.setPrecio(precio);

                producto.setDescripcion(txtDescripcion.getText().trim());

                // Porcentaje Iva
                if (iva.equalsIgnoreCase("No grava Iva")) {
                    producto.setIva(0);
                } else if (iva.equalsIgnoreCase("12%")) {
                    producto.setIva(12);
                } else if (iva.equalsIgnoreCase("14%")) {
                    producto.setIva(14);
                }

                // idCategoria - cargar metodo obtiene idCategoria
                this.idCategoria();
                producto.setIdCategoria(obtenerIdCategoriaCombo);
                producto.setEstado(1);

                // Actualizar el producto en la base de datos sin modificar la imagen
                if (controlProducto.actualizarSinImagen(producto, idProducto)) {
                    JOptionPane.showMessageDialog(null, "Producto actualizado correctamente");
                    CargarComboCategoria();
                    cargarTablaProductos();
                    this.comboIva.setSelectedItem("Seleccione Iva:");
                    Limpiar();
                } else {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el registro");
                }

                // Deshabilitar el campo txtCantidad después de realizar la actualización
                txtStock.setEnabled(false);

            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error en " + e);
            }
        }*/

        Producto producto = new Producto();
        Producto_Controller controlProducto = new Producto_Controller();
        String iva = comboIva.getSelectedItem().toString().trim();
        String categoria = comboCategoria.getSelectedItem().toString().trim();

// Validar campos
        if (txtNombre.getText().isEmpty() || txtStock.getText().isEmpty() || txtPrecio.getText().isEmpty() || txtDescripcion.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe completar todos los campos");
        } else if (iva.equalsIgnoreCase("Seleccione Iva:")) {
            JOptionPane.showMessageDialog(null, "Seleccione Iva");
        } else if (categoria.equalsIgnoreCase("Seleccione categoria:")) {
            JOptionPane.showMessageDialog(null, "Seleccione categoria");
        } else {
            // Validar y asignar nombre
            if (!txtNombre.getText().matches("^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑ\\s]+$")) {
                JOptionPane.showMessageDialog(null, "El campo Nombre solo puede contener letras, números y espacios");
                txtNombre.setBackground(Color.red);
                return;
            }
            // Validar y asignar stock
            if (!txtStock.getText().matches("^[0-9]+$")) {
                JOptionPane.showMessageDialog(null, "El campo Stock solo puede contener números");
                txtStock.setBackground(Color.red);
                return;
            }
            // Validar y asignar precio
            if (!txtPrecio.getText().matches("^\\d*\\.?\\d*$")) {
                JOptionPane.showMessageDialog(null, "El campo Precio solo puede contener números y un punto decimal opcional");
                txtPrecio.setBackground(Color.red);
                return;
            }
            // Validar y asignar descripción
            if (!txtDescripcion.getText().matches("^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑ\\s]+$")) {
                JOptionPane.showMessageDialog(null, "El campo Descripción solo puede contener letras, números y espacios");
                txtDescripcion.setBackground(Color.red);
                return;
            }
            try {
                producto.setNombre(txtNombre.getText().trim());
                producto.setStock(Integer.parseInt(txtStock.getText().trim()));

                // Se transforma la coma(,) a punto(.)
                producto.setPrecio(Double.parseDouble(txtPrecio.getText().trim().replace(",", ".")));
                producto.setDescripcion(txtDescripcion.getText().trim());

                // Porcentaje Iva
                if (iva.equalsIgnoreCase("No grava Iva")) {
                    producto.setIva(0);
                } else if (iva.equalsIgnoreCase("12%")) {
                    producto.setIva(12);
                } else if (iva.equalsIgnoreCase("14%")) {
                    producto.setIva(14);
                }

                // idCategoria - cargar metodo obtiene idCategoria
                this.idCategoria();
                producto.setIdCategoria(obtenerIdCategoriaCombo);
                producto.setEstado(1);

                // Actualizar el producto en la base de datos sin modificar la imagen
                if (controlProducto.actualizarSinImagen(producto, idProducto)) {
                    JOptionPane.showMessageDialog(null, "Producto actualizado correctamente");
                    txtNombre.setBackground(Color.green);
                    txtPrecio.setBackground(Color.green);
                    txtDescripcion.setBackground(Color.green);
                    CargarComboCategoria();
                    cargarTablaProductos();
                    this.comboIva.setSelectedItem("Seleccione Iva:");
                    Limpiar();
                } else {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el registro");
                }

                // Deshabilitar el campo txtCantidad después de realizar la actualización
                txtStock.setEnabled(false);

            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error en " + e);
            }
        }

    }//GEN-LAST:event_btnActualizarActionPerformed

    private int idCategoria() {
        String sql = "SELECT*FROM categoria WHERE descripcion = '" + this.comboCategoria.getSelectedItem() + "'";
        Statement st;

        try {
            Connection cn = conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("idCategoria");
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error al obtener id categoria: " + ex);
        }
        return obtenerIdCategoriaCombo;
    }

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        Producto_Controller controlador = new Producto_Controller();
        if (idProducto == 0) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        } else {
            if (!controlador.eliminar(idProducto)) {
                JOptionPane.showMessageDialog(null, "Producto eliminado correctamente");
                this.cargarTablaProductos();
                this.CargarComboCategoria();
                this.Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "Error al eliminar el producto");
            }
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStockActionPerformed

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void comboIvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboIvaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboIvaActionPerformed

    private void comboCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCategoriaActionPerformed

    // Método para convertir la imagen en un arreglo de bytes
    // Método para convertir la imagen en un arreglo de bytes
    private byte[] getImagenBytes(String imagePath) {
        try {
            File file = new File(imagePath);
            FileInputStream fis = new FileInputStream(file);
            byte[] imagenBytes = new byte[(int) file.length()];
            fis.read(imagenBytes);
            fis.close();
            return imagenBytes;
        } catch (IOException e) {
            System.out.println("Error al leer la imagen: " + e);
            return null;
        }
    }

    private void mostrarImagenSeleccionada(String imagePath) {
        ImageIcon imageIcon = new ImageIcon(imagePath);
        Image image = imageIcon.getImage().getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_SMOOTH);
        lblFoto.setIcon(new ImageIcon(image));
    }

    private void btnSeleccionarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarImagenActionPerformed
        // Obtén la nueva imagen seleccionada y actualiza el producto en la base de datos
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de Imagen", "jpg", "jpeg", "png", "gif");
        fileChooser.setFileFilter(filter);

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            imagePath = file.getAbsolutePath();
            mostrarImagenSeleccionada(imagePath); // Mostramos la imagen seleccionada en el JLabel

            // Actualizar imagen del producto en la base de datos
            byte[] imagenBytes = getImagenBytes(imagePath);
            Producto_Controller controlProducto = new Producto_Controller();
            if (controlProducto.actualizarImagen(idProducto, imagenBytes)) {
                JOptionPane.showMessageDialog(null, "Imagen subida correctamente");
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar la imagen");
            }
        }
    }//GEN-LAST:event_btnSeleccionarImagenActionPerformed

    private void btnStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStockActionPerformed
        if (filaSeleccionada != -1) {
            // Obtener la cantidad actual del producto seleccionado en la tabla
            int cantidadActual = (int) tablaGestionProductos.getValueAt(filaSeleccionada, 2);
            txtStock.setText(String.valueOf(cantidadActual));
            txtStock.setEnabled(true); // Habilitar el campo txtCantidad
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un producto de la tabla");
        }
    }//GEN-LAST:event_btnStockActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JScrollPane ScrollCategorias;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnSeleccionarImagen;
    private javax.swing.JButton btnStock;
    private javax.swing.JComboBox<String> comboCategoria;
    private javax.swing.JComboBox<String> comboIva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jlabel_wallpaper;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JPanel panelTabla;
    public static javax.swing.JTable tablaGestionProductos;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables

    //Metodo para Limpiar campos
    private void Limpiar() {
        txtNombre.setText("");
        txtStock.setText("");
        txtPrecio.setText("");
        txtDescripcion.setText("");
        comboIva.setSelectedItem("Seleccione iva:");
        comboCategoria.setSelectedItem("Seleccione categoria:");
    }

    //Metodo para mostrar las categorias en el comboBox
    private void CargarComboCategoria() {
        Connection cn = conexion.conectar();
        String sql = "SELECT*FROM categoria";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            comboCategoria.removeAllItems();
            comboCategoria.addItem("Seleccione Categoria: ");
            while (rs.next()) {
                comboCategoria.addItem(rs.getString("descripcion"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar las categorias");
        }
    }

    //Metodo para mostrar todas las productos registrados
    String descripcionCategoria = "";
    double precio = 0.0;
    int porcentajeIva = 0;
    double IVA = 0.0;

    private void mostrarImagenProductoSeleccionado(int row) {
        DefaultTableModel model = (DefaultTableModel) tablaGestionProductos.getModel();
        int idProducto = Integer.parseInt(model.getValueAt(row, 0).toString());

        // Obtén la imagen del producto desde la base de datos usando el idProducto
        byte[] imagenBytes = obtenerImagenProductoPorId(idProducto);

        if (imagenBytes != null) {
            ImageIcon imageIcon = new ImageIcon(imagenBytes);
            Image image = imageIcon.getImage().getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_SMOOTH);
            lblFoto.setIcon(new ImageIcon(image));
        } else {
            // Si la imagen es null, muestra una imagen predeterminada o vacía
            lblFoto.setIcon(null);
        }
    }

    private byte[] obtenerImagenProductoPorId(int idProducto) {
        Connection cn = conexion.conectar();
        String sql = "SELECT imagen FROM producto WHERE idProducto = " + idProducto;
        Statement st;
        byte[] imagenBytes = null;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                imagenBytes = rs.getBytes("imagen");
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error al obtener la imagen del producto: " + ex);
        }

        return imagenBytes;
    }

    private void cargarTablaProductos() {
        Connection cn = conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "SELECT p.idProducto, p.nombre, p.stock, p.precio, p.descripcion, p.iva, c.descripcion AS 'categoria', p.estado FROM producto AS p, categoria AS c WHERE p.idCategoria = c.idCategoria ORDER BY idProducto ASC";
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            model.addColumn("#Producto");
            model.addColumn("Nombre");
            model.addColumn("Stock");
            model.addColumn("Precio");
            model.addColumn("Descripcion");
            model.addColumn("Iva");
            model.addColumn("Categoria");
            model.addColumn("Estado");

            while (rs.next()) {
                int idProducto = rs.getInt("idProducto");
                String nombre = rs.getString("nombre");
                int stock = rs.getInt("stock");
                double precio = rs.getDouble("precio");
                String descripcion = rs.getString("descripcion");
                int iva = rs.getInt("iva");
                String categoria = rs.getString("categoria");
                String estado = rs.getString("estado");

                Object[] fila = {idProducto, nombre, stock, precio, descripcion, iva, categoria, estado};
                model.addRow(fila);
            }

            cn.close();

        } catch (SQLException ex) {
            System.out.println("Error al llenar la tabla producto " + ex);
        }

        tablaGestionProductos.setModel(model); // Establecer el modelo de tabla

        // Evento para obtener el campo el cual el usuario ha dado clic y obtener la interfaz que mostrará la información
        tablaGestionProductos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = tablaGestionProductos.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idProducto = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosProductoSeleccionado(idProducto);
                    filaSeleccionada = fila_point; // Guardar la fila seleccionada
                    btnSeleccionarImagen.setEnabled(true);
                }
            }
        });
    }

    //METODO PARA CALCULAR IVA
    private double calcularIva(double precio, int iva) {
        int valor = iva;
        switch (valor) {
            case 0:
                IVA = 0.0;
                break;
            case 12:
                IVA = precio * 0.12;
                break;
            case 14:
                IVA = precio * 0.14;
                break;
            default:
                break;
        }

        IVA = (double) Math.round(IVA * 100) / 100;
        return IVA;
    }

    //METODO PARA ENVIAR DATOS SELECCIONADOS
    private void EnviarDatosProductoSeleccionado(int idProducto) {
        try {
            Connection cn = conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("SELECT*FROM producto WHERE idProducto = '" + idProducto + "'");

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtNombre.setText(rs.getString("nombre"));
                txtStock.setText(rs.getString("stock"));
                txtPrecio.setText(rs.getString("precio"));
                txtDescripcion.setText(rs.getString("descripcion"));
                int iva = rs.getInt("iva");
                switch (iva) {
                    case 0:
                        comboIva.setSelectedItem("No grava iva");
                        break;
                    case 12:
                        comboIva.setSelectedItem("12%");
                        break;
                    case 14:
                        comboIva.setSelectedItem("14%");
                        break;
                    default:
                        comboIva.setSelectedItem("Seleccione iva");
                        break;
                }
                int idCate = rs.getInt("idCategoria");
                comboCategoria.setSelectedItem(relacionarCategoria(idCate));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al seleccionar el producto: " + e);
        }
    }

    /*METODO PARA RELACIONAR CATEGORIAS*/
    private String relacionarCategoria(int idCategoria) {
        String sql = "SELECT descripcion FROM categoria WHERE idCategoria = '" + idCategoria + "'";
        Statement st;
        try {
            Connection cn = conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                descripcionCategoria = rs.getString("descripcion");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el id de la categoria: " + e);
        }
        return descripcionCategoria;
    }
}
