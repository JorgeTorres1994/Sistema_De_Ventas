package vista;

import conexion.conexion;
import controlador.Cliente_Controller;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Cliente;

public class FrmInternoGestionarCliente extends javax.swing.JInternalFrame {

    private int idCliente;

    public FrmInternoGestionarCliente() {
        initComponents();
        this.setSize(960, 490);
        this.setTitle("Gestionar Producto");
        this.cargarTablaClientes();
        //this.CargarComboCategoria();

        //INSERTAR IMAGEN CON CODIGO
        ImageIcon wallpaper = new ImageIcon("src/imagenes/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(960, 490, WIDTH));
        jlabel_wallpaper.setIcon(icono);
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        panelTabla = new javax.swing.JPanel();
        ScrollCategorias = new javax.swing.JScrollPane();
        tablaGestionClientes = new javax.swing.JTable();
        jlabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gestión de Clientes");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 0, -1, -1));

        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/borrar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 170, 140, 30));

        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/editar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 170, 140, 30));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Dni:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 100, 20));

        txtDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDniActionPerformed(evt);
            }
        });
        jPanel1.add(txtDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 190, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Nombre:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 100, 20));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Apellido:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 100, 20));

        txtApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidoActionPerformed(evt);
            }
        });
        jPanel1.add(txtApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 190, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Teléfono:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 100, 20));

        txtDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDireccionActionPerformed(evt);
            }
        });
        jPanel1.add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 370, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Dirección:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 80, 20));

        txtTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoActionPerformed(evt);
            }
        });
        jPanel1.add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 10, 190, 30));

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 190, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 930, 120));

        panelTabla.setBackground(new java.awt.Color(255, 255, 255));
        panelTabla.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelTabla.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaGestionClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ScrollCategorias.setViewportView(tablaGestionClientes);

        panelTabla.add(ScrollCategorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 910, 220));

        getContentPane().add(panelTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 930, 240));
        getContentPane().add(jlabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1160, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDniActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        /*Cliente cliente = new Cliente();
        Cliente_Controller controlCliente = new Cliente_Controller();

        // Validar campos
        if (txtNombre.getText().isEmpty() || txtApellido.getText().isEmpty() || txtDni.getText().isEmpty() || txtTelefono.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe completar todos los campos");
        } else {
            try {
                cliente.setNombre(txtNombre.getText().trim());
                cliente.setApellido(txtApellido.getText().trim());
                cliente.setDni(txtDni.getText().trim());
                cliente.setTelefono(txtTelefono.getText().trim());
                cliente.setDireccion(txtDireccion.getText().trim());

                if (controlCliente.actualizar(cliente, idCliente)) {
                    JOptionPane.showMessageDialog(null, "Cliente actualizado correctamente");
                    //CargarComboCategoria();
                    cargarTablaClientes();
                    //this.comboIva.setSelectedItem("Seleccione Iva:");
                    Limpiar();
                } else {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el registro");
                }

            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error en " + e);
            }
        }*/

        Cliente cliente = new Cliente();
        Cliente_Controller controlCliente = new Cliente_Controller();

// Validar campos
        if (txtNombre.getText().isEmpty() || txtApellido.getText().isEmpty() || txtDni.getText().isEmpty() || txtTelefono.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe completar todos los campos");
        } else {
            // Validar y asignar nombre
            if (!txtNombre.getText().matches("^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$")) {
                JOptionPane.showMessageDialog(null, "El campo Nombre solo puede contener letras y espacios");
                txtNombre.setBackground(Color.red);
                return;
            }
            // Validar y asignar apellido
            if (!txtApellido.getText().matches("^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$")) {
                JOptionPane.showMessageDialog(null, "El campo Apellido solo puede contener letras y espacios");
                txtApellido.setBackground(Color.red);
                return;
            }
            // Validar y asignar DNI
            if (!txtDni.getText().matches("^\\d+$")) {
                JOptionPane.showMessageDialog(null, "El campo DNI solo puede contener números");
                txtDni.setBackground(Color.red);
                return;
            }
            // Validar y asignar teléfono
            if (!txtTelefono.getText().matches("^\\d+$")) {
                JOptionPane.showMessageDialog(null, "El campo Teléfono solo puede contener números");
                txtTelefono.setBackground(Color.red);
                return;
            }

            try {
                cliente.setNombre(txtNombre.getText().trim());
                cliente.setApellido(txtApellido.getText().trim());
                cliente.setDni(txtDni.getText().trim());
                cliente.setTelefono(txtTelefono.getText().trim());
                cliente.setDireccion(txtDireccion.getText().trim());

                if (controlCliente.actualizar(cliente, idCliente)) {
                    JOptionPane.showMessageDialog(null, "Cliente actualizado correctamente");
                    txtNombre.setBackground(Color.green);
                    txtApellido.setBackground(Color.green);
                    txtDni.setBackground(Color.green);
                    txtTelefono.setBackground(Color.green);
                    txtDireccion.setBackground(Color.green);
                    cargarTablaClientes();
                    Limpiar();
                } else {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el registro");
                }

            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error en " + e);
            }
        }

    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        Cliente_Controller controlCliente = new Cliente_Controller();
        if (idCliente == 0) {
            JOptionPane.showMessageDialog(null, "Seleccione un cliente");
        } else {
            if (!controlCliente.eliminar(idCliente)) {
                JOptionPane.showMessageDialog(null, "Cliente eliminado correctamente");
                this.cargarTablaClientes();
                //this.CargarComboCategoria();
                this.Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "Error al eliminar el cliente");
            }
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidoActionPerformed

    private void txtDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDireccionActionPerformed

    private void txtTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelefonoActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JScrollPane ScrollCategorias;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jlabel_wallpaper;
    private javax.swing.JPanel panelTabla;
    public static javax.swing.JTable tablaGestionClientes;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    //Metodo para Limpiar campos
    private void Limpiar() {
        txtNombre.setText("");
        txtApellido.setText("");
        txtDni.setText("");
        txtTelefono.setText("");
        txtDireccion.setText("");
        //comboIva.setSelectedItem("Seleccione iva:");
        //comboCategoria.setSelectedItem("Seleccione categoria:");
    }

    //Metodo para mostrar todas las clientes registrados
    private void cargarTablaClientes() {
        Connection cn = conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "SELECT idCliente, nombre, apellido, dni, telefono, direccion, estado FROM cliente ORDER BY idCliente ASC";
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            model.addColumn("#Cliente");
            model.addColumn("Nombres");
            model.addColumn("Apellidos");
            model.addColumn("Dni");
            model.addColumn("Telefono");
            model.addColumn("Direccion");
            model.addColumn("Estado");

            while (rs.next()) {
                int idCliente = rs.getInt("idCliente");
                String nombre = rs.getString("nombre");
                String apellido = rs.getString("apellido");
                String dni = rs.getString("dni");
                String telefono = rs.getString("telefono");
                String direccion = rs.getString("direccion");
                String estado = rs.getString("estado");

                Object[] fila = {idCliente, nombre, apellido, dni, telefono, direccion, estado};
                model.addRow(fila);
            }

            cn.close();

        } catch (SQLException ex) {
            System.out.println("Error al llenar la tabla cliente: " + ex);
        }

        tablaGestionClientes.setModel(model); // Establecer el modelo de tabla

        // Evento para obtener el campo el cual el usuario ha dado clic y obtener la interfaz que mostrará la información
        tablaGestionClientes.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = tablaGestionClientes.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idCliente = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosProductoSeleccionado(idCliente);
                }
            }
        });
    }

    //METODO PARA ENVIAR DATOS SELECCIONADOS
    private void EnviarDatosProductoSeleccionado(int idCliente) {
        try {
            Connection cn = conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("SELECT*FROM cliente WHERE idCliente = '" + idCliente + "'");

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtNombre.setText(rs.getString("nombre"));
                txtApellido.setText(rs.getString("apellido"));
                txtDni.setText(rs.getString("dni"));
                txtTelefono.setText(rs.getString("telefono"));
                txtDireccion.setText(rs.getString("direccion"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al seleccionar el cliente: " + e);
        }
    }

}
