package vista;

import conexion.conexion;
import controlador.Categoria_Controller;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;

public class FrmInternoGestionarCategoria extends javax.swing.JInternalFrame {

    private int idCategoria;

    public FrmInternoGestionarCategoria() {
        initComponents();
        this.setSize(700, 450);
        this.setTitle("Gestionar Categoría");
        this.cargarTablaCategorias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        panelTabla = new javax.swing.JPanel();
        ScrollCategorias = new javax.swing.JScrollPane();
        tablaGestionCategorias = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnActualizar1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        lblFondo = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gestión de Categorías");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));

        panelTabla.setBackground(new java.awt.Color(255, 255, 255));
        panelTabla.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelTabla.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaGestionCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ScrollCategorias.setViewportView(tablaGestionCategorias);

        panelTabla.add(ScrollCategorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 250));

        getContentPane().add(panelTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 400, 250));

        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/borrar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 150, 140, 30));

        btnActualizar1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/editar.png"))); // NOI18N
        btnActualizar1.setText("Actualizar");
        btnActualizar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizar1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, 140, 30));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Descripción:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 100, 20));

        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });
        jPanel1.add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 190, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 230, 210, 130));

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo3.jpg"))); // NOI18N
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 690, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void btnActualizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizar1ActionPerformed
        /*if (!txtDescripcion.getText().isEmpty()) {
            Categoria categoria = new Categoria();
            Categoria_Controller controlador = new Categoria_Controller();

            categoria.setDescripcion(txtDescripcion.getText().trim());

            if (controlador.actualizar(categoria, idCategoria)) {
                JOptionPane.showMessageDialog(null, "Categoria actualizada correctamente");
                txtDescripcion.setText("");
                this.cargarTablaCategorias();
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar la categoria");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Selecciona una categoria");
        }*/

        if (!txtDescripcion.getText().isEmpty()) {
            Categoria categoria = new Categoria();
            Categoria_Controller controlador = new Categoria_Controller();

            // Validar y asignar descripción
            if (!txtDescripcion.getText().matches("^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑ\\s]+$")) {
                JOptionPane.showMessageDialog(null, "El campo Descripción solo puede contener letras, números y espacios");
                txtDescripcion.setBackground(Color.red);
                return;
            }
            categoria.setDescripcion(txtDescripcion.getText().trim());

            if (controlador.actualizar(categoria, idCategoria)) {
                JOptionPane.showMessageDialog(null, "Categoría actualizada correctamente");
                txtDescripcion.setText("");
                txtDescripcion.setBackground(Color.green); // Pintar de verde el campo de descripción
                this.cargarTablaCategorias();
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar la categoría");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona una categoría");
        }

    }//GEN-LAST:event_btnActualizar1ActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (!txtDescripcion.getText().isEmpty()) {
            Categoria categoria = new Categoria();
            Categoria_Controller controlador = new Categoria_Controller();

            categoria.setDescripcion(txtDescripcion.getText().trim());

            if (!controlador.eliminar(idCategoria)) {
                JOptionPane.showMessageDialog(null, "Categoria eliminada correctamente");
                txtDescripcion.setText("");
                this.cargarTablaCategorias();
            } else {
                JOptionPane.showMessageDialog(null, "Error al eliminar la categoria");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Selecciona una categoria a eliminar");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JScrollPane ScrollCategorias;
    private javax.swing.JButton btnActualizar1;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JPanel panelTabla;
    public static javax.swing.JTable tablaGestionCategorias;
    private javax.swing.JTextField txtDescripcion;
    // End of variables declaration//GEN-END:variables

    //Metodo para mostrar todas las categorias
    private void cargarTablaCategorias() {
        Connection cn = conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "SELECT idCategoria, descripcion, estado FROM categoria ";
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            FrmInternoGestionarCategoria.tablaGestionCategorias = new JTable(model);
            FrmInternoGestionarCategoria.ScrollCategorias.setViewportView(FrmInternoGestionarCategoria.tablaGestionCategorias);

            model.addColumn("#Categoria");
            model.addColumn("Descripcion");
            model.addColumn("Estado");

            while (rs.next()) {
                Object fila[] = new Object[3];

                for (int i = 0; i < 3; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }
            cn.close();

        } catch (SQLException ex) {
            System.out.println("Error al llenar la tabla categoria " + ex);
        }

        tablaGestionCategorias.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = tablaGestionCategorias.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idCategoria = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosCategoriaSeleccionada(idCategoria);
                }
            }
        });
    }

    private void EnviarDatosCategoriaSeleccionada(int idCategoria) {
        try {
            Connection cn = conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("SELECT*FROM categoria WHERE idCategoria = '" + idCategoria + "'");

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtDescripcion.setText(rs.getString("descripcion"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al seleccionar la categoria: " + e);
        }
    }
}
