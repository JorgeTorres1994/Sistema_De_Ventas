package vista;

import conexion.conexion;
import controlador.Producto_Controller;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import modelo.Producto;

public class FrmInternoProducto extends javax.swing.JInternalFrame {

    int obtenerIdCategoriaCombo = 0;
    String Ruta = "";

    public FrmInternoProducto() {
        initComponents();
        this.setSize(new Dimension(620, 450));
        this.setTitle("Registrar Nuevo Producto");
        this.cargarCategorias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblImagen = new javax.swing.JLabel();
        btnSeleccionarImagen = new javax.swing.JButton();
        txtPrecio = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtDescripcion = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        comboIva = new javax.swing.JComboBox<>();
        txtGuardar = new javax.swing.JButton();
        comboCategoria = new javax.swing.JComboBox<>();
        fondo = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nuevo Producto");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Stock:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Precio:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Descripción:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 230, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("IVA:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Categorías:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Nombre:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, -1, -1));

        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/agregarImagenProducto.png"))); // NOI18N
        getContentPane().add(lblImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 110, 130, 130));

        btnSeleccionarImagen.setText("Subir");
        btnSeleccionarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarImagenActionPerformed(evt);
            }
        });
        getContentPane().add(btnSeleccionarImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 250, 90, -1));

        txtPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioActionPerformed(evt);
            }
        });
        getContentPane().add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 190, 160, -1));
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 160, -1));

        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });
        getContentPane().add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 160, -1));

        txtStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStockActionPerformed(evt);
            }
        });
        getContentPane().add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, 160, -1));

        comboIva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Iva:", "No grava Iva", "12%", "14%" }));
        comboIva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboIvaActionPerformed(evt);
            }
        });
        getContentPane().add(comboIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 160, -1));

        txtGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salvar.png"))); // NOI18N
        txtGuardar.setText("Guardar");
        txtGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(txtGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 360, 130, 30));

        comboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Categoria:" }));
        comboCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCategoriaActionPerformed(evt);
            }
        });
        getContentPane().add(comboCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 160, -1));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo3.jpg"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 620, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioActionPerformed

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void txtStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStockActionPerformed

    private void comboIvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboIvaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboIvaActionPerformed

    private byte[] imagenBytes;

// Método para convertir la imagen en un arreglo de bytes
    private byte[] getImagenBytes(String imagePath) {
        try {
            File file = new File(imagePath);
            FileInputStream fis = new FileInputStream(file);
            byte[] imagenBytes = new byte[(int) file.length()];
            fis.read(imagenBytes);
            fis.close();
            return imagenBytes;
        } catch (IOException e) {
            System.out.println("Error al leer la imagen: " + e);
            return null;
        }
    }

    private void txtGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGuardarActionPerformed
        /*Producto producto = new Producto();
        Producto_Controller controlProducto = new Producto_Controller();
        String iva = "";
        iva = comboIva.getSelectedItem().toString().trim();
        String categoria = "";
        categoria = comboCategoria.getSelectedItem().toString().trim();

     
        if (txtNombre.getText().isEmpty() || txtStock.getText().isEmpty() || txtPrecio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe completar todos los campos");
            txtNombre.setBackground(Color.red);
            txtStock.setBackground(Color.red);
            txtPrecio.setBackground(Color.red);
        } else {
            if (!controlProducto.existeProducto(txtNombre.getText().trim())) {
                if (iva.equalsIgnoreCase("Seleccione Iva:")) {
                    JOptionPane.showMessageDialog(null, "Seleccione Iva:");
                } else {
                    if (categoria.equalsIgnoreCase("Seleccione categoria:")) {
                        JOptionPane.showMessageDialog(null, "Seleccione categoria");
                    } else {
                        try {
                            producto.setNombre(txtNombre.getText().trim());
                            producto.setStock(Integer.parseInt(txtStock.getText().trim()));
                            //producto.setPrecio(Double.parseDouble(txtPrecio.getText().trim()));
                            String precioTXT = "";
                            double precio = 0.0;
                            precioTXT = txtPrecio.getText().trim();
                            boolean aux = false;

                         
                            for (int i = 0; i < precioTXT.length(); i++) {
                                if (precioTXT.charAt(i) == ',') {
                                    String precioNuevo = precioTXT.replace(",", ".");
                                    precio = Double.parseDouble(precioNuevo);
                                    aux = true;
                                }
                            }

                            //EVALUAR CONDICION
                            if (aux == true) {
                                producto.setPrecio(precio);
                            } else {
                                precio = Double.parseDouble(precioTXT);
                                producto.setPrecio(precio);
                            }

                            producto.setDescripcion(txtDescripcion.getText().trim());

                            //Porcentaje Iva
                            if (iva.equalsIgnoreCase("No grava Iva")) {
                                producto.setIva(0);
                            } else if (iva.equalsIgnoreCase("12%")) {
                                producto.setIva(12);
                            } else if (iva.equalsIgnoreCase("14%")) {
                                producto.setIva(14);
                            }

                            // Verificar si la imagen está vacía
                            if (imagenBytes == null) {
                                // Crear un arreglo de bytes vacío para almacenar en la base de datos
                                imagenBytes = new byte[0];
                            }
                            producto.setImagen(imagenBytes); // Asigna los bytes de la imagen al producto

                            //idCategoria - cargar metodo obtiene idCategoria
                            this.idCategoria();
                            producto.setIdCategoria(obtenerIdCategoriaCombo);
                            producto.setEstado(1);

                            if (controlProducto.guardar(producto)) {
                                JOptionPane.showMessageDialog(null, "Producto registrado correctamente");
                                txtNombre.setBackground(Color.green);
                                txtStock.setBackground(Color.green);
                                txtPrecio.setBackground(Color.green);
                                txtDescripcion.setBackground(Color.green);

                                cargarCategorias();
                                this.comboIva.setSelectedItem("Seleccione Iva:");
                                Limpiar();
                            } else {
                                JOptionPane.showMessageDialog(null, "Error al guardar el registro");
                            }

                        } catch (HeadlessException | NumberFormatException e) {
                            //JOptionPane.showMessageDialog(null, "Ocurrió un error en " + e);
                            JOptionPane.showMessageDialog(null, "Los campos stock y precio solo aceptan campo numericos");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ya existe el producto, por favor ingresa un producto diferente");
            }
        }*/
        Producto producto = new Producto();
        Producto_Controller controlProducto = new Producto_Controller();
        String iva = comboIva.getSelectedItem().toString().trim();
        String categoria = comboCategoria.getSelectedItem().toString().trim();

        // Validar campos
        if (txtNombre.getText().isEmpty() || txtStock.getText().isEmpty() || txtPrecio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe completar todos los campos");
            txtNombre.setBackground(Color.red);
            txtStock.setBackground(Color.red);
            txtPrecio.setBackground(Color.red);
        } else {
            if (!controlProducto.existeProducto(txtNombre.getText().trim())) {
                if (iva.equalsIgnoreCase("Seleccione Iva:")) {
                    JOptionPane.showMessageDialog(null, "Seleccione Iva:");
                } else {
                    if (categoria.equalsIgnoreCase("Seleccione categoria:")) {
                        JOptionPane.showMessageDialog(null, "Seleccione categoria");
                    } else {
                        try {
                            // Validar y asignar nombre
                            if (!txtNombre.getText().matches("^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑ\\s]+$")) {
                                JOptionPane.showMessageDialog(null, "El campo Nombre solo puede contener letras, números y espacios");
                                txtNombre.setBackground(Color.red);
                                return;
                            }
                            producto.setNombre(txtNombre.getText().trim());

                            // Validar y asignar stock
                            if (!txtStock.getText().matches("\\d+")) {
                                JOptionPane.showMessageDialog(null, "El campo Stock solo puede contener números enteros");
                                txtStock.setBackground(Color.red);
                                return;
                            }
                            producto.setStock(Integer.parseInt(txtStock.getText().trim()));

                            // Validar y asignar precio
                            if (!txtPrecio.getText().matches("^\\d+(\\.\\d+)?$")) {
                                JOptionPane.showMessageDialog(null, "El campo Precio solo puede contener números y un punto decimal opcional");
                                txtPrecio.setBackground(Color.red);
                                return;
                            }
                            producto.setPrecio(Double.parseDouble(txtPrecio.getText().trim()));

                            producto.setDescripcion(txtDescripcion.getText().trim());

                            //Porcentaje Iva
                            if (iva.equalsIgnoreCase("No grava Iva")) {
                                producto.setIva(0);
                            } else if (iva.equalsIgnoreCase("12%")) {
                                producto.setIva(12);
                            } else if (iva.equalsIgnoreCase("14%")) {
                                producto.setIva(14);
                            }

                            // Verificar si la imagen está vacía
                            if (imagenBytes == null) {
                                // Crear un arreglo de bytes vacío para almacenar en la base de datos
                                imagenBytes = new byte[0];
                            }
                            producto.setImagen(imagenBytes); // Asigna los bytes de la imagen al producto

                            //idCategoria - cargar metodo obtiene idCategoria
                            this.idCategoria();
                            producto.setIdCategoria(obtenerIdCategoriaCombo);
                            producto.setEstado(1);

                            if (controlProducto.guardar(producto)) {
                                JOptionPane.showMessageDialog(null, "Producto registrado correctamente");
                                txtNombre.setBackground(Color.green);
                                txtStock.setBackground(Color.green);
                                txtPrecio.setBackground(Color.green);
                                txtDescripcion.setBackground(Color.green);

                                cargarCategorias();
                                this.comboIva.setSelectedItem("Seleccione Iva:");
                                Limpiar();
                            } else {
                                JOptionPane.showMessageDialog(null, "Error al guardar el registro");
                            }

                        } catch (HeadlessException | NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "Los campos stock y precio solo aceptan campo numéricos");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ya existe el producto, por favor ingresa un producto diferente");
            }
        }
    }//GEN-LAST:event_txtGuardarActionPerformed

    private void comboCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCategoriaActionPerformed

    //EVENTO PARA SELECCIONAR IMAGEN
    private void btnSeleccionarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarImagenActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de Imagen", "jpg", "jpeg", "png", "gif");
        fileChooser.setFileFilter(filter);

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String imagePath = file.getAbsolutePath();
            imagenBytes = getImagenBytes(imagePath);
            if (imagenBytes != null) {
                ImageIcon imageIcon = new ImageIcon(imagePath);
                Image image = imageIcon.getImage().getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH);
                lblImagen.setIcon(new ImageIcon(image));
            } else {
                JOptionPane.showMessageDialog(null, "Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_btnSeleccionarImagenActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSeleccionarImagen;
    private javax.swing.JComboBox<String> comboCategoria;
    private javax.swing.JComboBox<String> comboIva;
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JButton txtGuardar;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables

    private void Limpiar() {
        txtNombre.setText("");
        txtStock.setText("");
        txtPrecio.setText("");
        txtDescripcion.setText("");
    }

//METODO PARA CARGAR LAS CATEGORIAS
    private void cargarCategorias() {
        Connection cn = conexion.conectar();
        String sql = "SELECT*FROM categoria";
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            comboCategoria.removeAllItems();//Eliminar items por defecto
            comboCategoria.addItem("Seleccione categoria: ");
            while (rs.next()) {
                comboCategoria.addItem(rs.getString("descripcion"));
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error al cargar las categorias: " + ex);
        }
    }

    //METODO PARA OBTENER IDCATEGORIA
    private int idCategoria() {
        String sql = "SELECT*FROM categoria WHERE descripcion = '" + this.comboCategoria.getSelectedItem() + "'";
        Statement st;

        try {
            Connection cn = conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("idCategoria");
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error al obtener id categoria: " + ex);
        }
        return obtenerIdCategoriaCombo;
    }

}
